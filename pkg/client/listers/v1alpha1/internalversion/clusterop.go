/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	v1alpha1 "github.com/AnshulAngaria/ClusterOP/pkg/api/AnshulAngaria/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterOPLister helps list ClusterOPs.
// All objects returned here must be treated as read-only.
type ClusterOPLister interface {
	// List lists all ClusterOPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterOP, err error)
	// ClusterOPs returns an object that can list and get ClusterOPs.
	ClusterOPs(namespace string) ClusterOPNamespaceLister
	ClusterOPListerExpansion
}

// clusterOPLister implements the ClusterOPLister interface.
type clusterOPLister struct {
	indexer cache.Indexer
}

// NewClusterOPLister returns a new ClusterOPLister.
func NewClusterOPLister(indexer cache.Indexer) ClusterOPLister {
	return &clusterOPLister{indexer: indexer}
}

// List lists all ClusterOPs in the indexer.
func (s *clusterOPLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterOP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterOP))
	})
	return ret, err
}

// ClusterOPs returns an object that can list and get ClusterOPs.
func (s *clusterOPLister) ClusterOPs(namespace string) ClusterOPNamespaceLister {
	return clusterOPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterOPNamespaceLister helps list and get ClusterOPs.
// All objects returned here must be treated as read-only.
type ClusterOPNamespaceLister interface {
	// List lists all ClusterOPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterOP, err error)
	// Get retrieves the ClusterOP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterOP, error)
	ClusterOPNamespaceListerExpansion
}

// clusterOPNamespaceLister implements the ClusterOPNamespaceLister
// interface.
type clusterOPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterOPs in the indexer for a given namespace.
func (s clusterOPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterOP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterOP))
	})
	return ret, err
}

// Get retrieves the ClusterOP from the indexer for a given namespace and name.
func (s clusterOPNamespaceLister) Get(name string) (*v1alpha1.ClusterOP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterop"), name)
	}
	return obj.(*v1alpha1.ClusterOP), nil
}
